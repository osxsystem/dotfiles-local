
" Config for MacVim only
" @version 0.0.1
" @Author Hugues
" @email osxsystem2014@gmail.com
" *=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=



" Call the theme one
" colorscheme  gruvbox

set background=dark
" set termguicolors
colorscheme  neodark

let g:neodark#terminal_transparent = 1

let g:airline_powerline_fonts=1
let g:airline#extensions#tabline#enabled = 1

let g:lightline = {}
let g:lightline.colorscheme = 'neodark'

if has("gui_macvim")
  " set macvim specific stuff
  set guifont=JetBrainsMono\ Nerd\ Font\ Mono:h12
  set linespace=6
  set guioptions=         " remove scroll bar on the right
endif
" General settings {{{
scriptencoding utf-16      " allow emojis in vimrc
set nocompatible           " vim, not vi
syntax on                  " syntax highlighting
filetype plugin indent on  " try to recognize filetypes and load rel' plugins
set guicursor=
" set guicursor=n-v-c:block-Cursor/lCursor-blinkon0,i-ci:ver25-Cursor/lCursor,r-cr:hor20-Cursor/lCursor
" set column 120
set textwidth=120
set colorcolumn=+1
" *=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=

"  Behavior Modification ----------------------  {{{
" I'm always use comma for leader key, some people choose tab.
let g:mapleader=","
set backspace=2       " Backspace deletes like most programs in insert mode
set history=200       " how many : commands to save in history
set ruler             " show the cursor position all the time
set showcmd           " display incomplete commands
set incsearch         " do incremental searching
set laststatus=2      " Always display the status line
set autowrite         " Automatically :write before running commands
set ignorecase        " ignore case in searches
set smartcase         " use case sensitive if capital letter present or \C
set magic             " Use 'magic' patterns (extended regular expressions).
set noshowmode        " don't show mode as airline already does
set showcmd           " show any commands
set foldmethod=manual " set folds by syntax of current language
set mouse=a           " enable mouse (selection, resizing windows)
set iskeyword+=-      " treat dash separated words as a word text object

set tabstop=2         " Softtabs or die! use 2 spaces for tabs.
set shiftwidth=2      " Number of spaces to use for each step of (auto)indent.
set expandtab         " insert tab with right amount of spacing
set shiftround        " Round indent to multiple of 'shiftwidth'
" set termguicolors     " enable true colors
set hidden            " enable hidden unsaved buffers
set autoread          " make Vim automatically refresh any files that haven't been edited by Vim
if !has('nvim')             " does not work on neovim
  set emoji                 " treat emojis ðŸ˜„  as full width characters
  set cryptmethod=blowfish2 " set encryption to use blowfish2 (vim -x file.txt)
end

set ttyfast           " should make scrolling faster
set lazyredraw        " should make scrolling faster

" visual bell for errors
set visualbell

" text appearance
set textwidth=120
set nowrap                          " nowrap by default
set list                            " show invisible characters
set listchars=tab:Â»Â·,trail:Â·,nbsp:Â· " Display extra whitespace

" Numbers
set number
set numberwidth=1

" turn relative line numbers on
set relativenumber

" set where swap file and undo/backup files are saved
set backupdir=~/.vim/tmp,.
set directory=~/.vim/tmp,.

" persistent undo between file reloads
if has('persistent_undo')
  set undofile
  set undodir=~/.vim/tmp,.
endif

" Open new split panes to right and bottom, which feels more natural
set splitbelow
set splitright


" Always use vertical diffs
" set diffopt+=vertical
set noundofile
" highlight fenced code blocks in markdown
let g:markdown_fenced_languages = [
      \ 'bash=sh',
      \ 'elixir',
      \ 'elm',
      \ 'graphql',
      \ 'html',
      \ 'js=javascript',
      \ 'json',
      \ 'python',
      \ 'ruby',
      \ 'sql',
      \ 'vim',
      \ ]

" enable folding in bash files
let g:sh_fold_enabled=1
" }}}
" Ignore popular folder and file system
let g:ctrlp_custom_ignore ='node_modules\DS_Store\|git'
set wildignore+=*/tmp/*,*.so,*.swp,*.zip     " Linux/MacOSX

" let g:ctrlp_match_window = 'top,order:ttb,min:1,max:31,results:31'




" ------------------- MAPPING --------------------------------------------
nnoremap ,<space> :nohlsearch<CR>					" stop highline search

" VimPlug:
nnoremap <leader>pi :PlugInstall<CR>
nnoremap <leader>pu :PlugUpdate<CR>
nnoremap <leader>pc :PlugClean<CR>

" close all other windows with <leader>o
nnoremap <leader>wo <c-w>o

" Switch between the last two files
nnoremap <tab><tab> <c-^>
" ---------------------- COPY TO CLIPBOARD -----------------------
" :w !pbcopy work when copy from the other window
vmap <C-c> :w !pbcopy<CR>

" copy to end of line
nnoremap Y y$

" copy to system clipboard
noremap gy "+y

" copy whole file to system clipboard
nnoremap gY gg"+yG

" macOS clipboard connected Vi
set clipboard=unnamed
" Quicker window movement
nnoremap <C-j> <C-w>j
nnoremap <C-k> <C-w>k
nnoremap <C-h> <C-w>h
nnoremap <C-l> <C-w>l
" --------------- Search ----------------------------------
set hlsearch

" read/write file when moving buffer
set autowrite
set autoread

set undofile
set undodir=/tmp

" Incsearch:
map /  <Plug>(incsearch-forward)
map ?  <Plug>(incsearch-backward)
map g/ <Plug>(incsearch-stay)

" --------------- End Search ------------------------------
" toggle NERDTree
nmap <C-b> :NERDTreeToggle<cr>
" NERDTree reload or refresh
nmap <Leader>r :NERDTreeRefreshRoot<CR>

" Open files relative to current path:
nnoremap <leader>ed :edit <C-R>=expand("%:p:h") . "/" <CR>
nnoremap <leader>sp :split <C-R>=expand("%:p:h") . "/" <CR>
nnoremap <leader>vs :vsplit <C-R>=expand("%:p:h") . "/" <CR>
" move lines up and down in visual mode
xnoremap <c-k> :move '<-2<CR>gv=gv
xnoremap <c-j> :move '>+1<CR>gv=gv

" comment on a file tpope/vim-commentary
xnoremap <C-\> gc
" use :GFiles instead of :Files, seeing as node_modules is usually in the .gitingore file
nnoremap <c-p> :GFiles<cr>





" FZF
" set rtp+=/usr/local/opt/fzf
" If installed using git
map <F4> <Esc><Esc>:Files!<CR>
map <F3> <Esc><Esc>:BLines!<CR>

set rtp+=~/.fzf
nnoremap <silent> K :call LanguageClient#textDocument_hover()<CR>
nnoremap <silent> gd :call LanguageClient#textDocument_definition()<CR>
nnoremap <silent> <F2> :call LanguageClient#textDocument_rename()<CR>





" ====================================================================

" == AUTOCMD ================================ 
" by default .ts file are not identified as typescript and .tsx files are not
" identified as typescript react file, so add following
au BufNewFile,BufRead *.ts setlocal filetype=typescript
au BufNewFile,BufRead *.tsx setlocal filetype=typescript.tsx
autocmd BufEnter *.{js,ts,jsx,tsx} :syntax sync fromstart

" == AUTOCMD END ================================


" COC settings

let g:coc_global_extensions = [
  \ 'coc-tsserver'
  \ ]

if isdirectory('./node_modules') && isdirectory('./node_modules/eslint')
  let g:coc_global_extensions += ['coc-eslint']
endif
